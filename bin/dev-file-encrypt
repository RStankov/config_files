#!/bin/bash
set -e

usage() {
  echo "Usage: $0 <file_to_encrypt>"
  echo "Passphrase should be provided via stdin: echo 'your_key' | $0 file.txt"
  exit 1
}

# Check arguments
if [ $# -ne 1 ]; then
  usage
fi

INPUT_FILE="$1"

# Check if file exists
if [ ! -f "$INPUT_FILE" ]; then
  echo "❌ Error: File '$INPUT_FILE' not found."
  exit 1
fi

# Check if passphrase is provided via stdin
if [ -t 0 ]; then
  echo "❌ Error: No passphrase provided. Use: echo 'your_passphrase' | $0 $INPUT_FILE"
  exit 1
fi

# Read the passphrase from stdin
read -r PASSPHRASE

# Generate file paths
ENCRYPTED_FILE="${INPUT_FILE}.enc"
TEMP_DECRYPTED_FILE="${INPUT_FILE}.tmp.decrypt"

echo "Encrypting '$INPUT_FILE'..."

# Encrypt the file (explicit parameters for future-proofing)
echo "$PASSPHRASE" | openssl enc -aes-256-cbc -pbkdf2 -iter 100000 -salt -pass stdin -in "$INPUT_FILE" -out "$ENCRYPTED_FILE"

echo "Verifying encryption by decrypting..."

# Decrypt for verification (explicit parameters for future-proofing)
echo "$PASSPHRASE" | openssl enc -aes-256-cbc -pbkdf2 -iter 100000 -d -salt -pass stdin -in "$ENCRYPTED_FILE" -out "$TEMP_DECRYPTED_FILE"

echo "Comparing hashes..."

# Compare hashes
ORIGINAL_HASH=$(shasum -a 256 "$INPUT_FILE" | awk '{print $1}')
DECRYPTED_HASH=$(shasum -a 256 "$TEMP_DECRYPTED_FILE" | awk '{print $1}')

if [ "$ORIGINAL_HASH" = "$DECRYPTED_HASH" ]; then
  echo "✅ Hashes match - encryption/decryption successful!"
  echo "Cleaning up temporary files..."
  rm "$TEMP_DECRYPTED_FILE"
  echo "✅ File encrypted successfully!"
  echo "Encrypted file saved to: $ENCRYPTED_FILE"
else
  echo "❌ Error: Hashes don't match! Encryption/decryption failed."
  echo "Original hash:  $ORIGINAL_HASH"
  echo "Decrypted hash: $DECRYPTED_HASH"
  rm "$TEMP_DECRYPTED_FILE"
  rm "$ENCRYPTED_FILE"
  exit 1
fi
