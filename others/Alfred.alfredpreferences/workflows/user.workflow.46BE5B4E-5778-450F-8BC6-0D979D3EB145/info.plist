<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.farrell.pkgman.alfredworkflow</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>18B0C07D-A101-4267-B306-7925DE8A30C9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0A704625-29E6-450E-8F2C-8E4EC7179899</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>265DF548-7D96-4F94-AB0E-6AD26F31B4A1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>2BECD5EE-3FDE-434C-8ADA-2FEAE34FBF34</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>4F9B49BB-0F1E-4D72-A339-08C76E2D2C2A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>18B0C07D-A101-4267-B306-7925DE8A30C9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>348251C4-2B72-432F-A923-B082C6740DEA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>72C0A2C4-3F23-46F5-831F-F0A7C4FD04C2</key>
		<array/>
		<key>78A70680-7C8A-4CC4-AE71-A070E3E8CCD9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>96A609DD-13FB-44C7-9ADB-F3BC94017A65</key>
		<array/>
		<key>B9D9D59E-5B75-418E-8D5D-75EADD6D162A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>C0190356-1EDC-4E5C-8187-9E3C4C69FBD1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>D882F2C5-CA0E-4D23-B1CC-28AC8AD1DB0E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>E106723F-9932-431B-8250-64F2983338FC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>E894CAC8-3680-4863-B8A5-EFCFD78B56F3</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B8583C34-636E-4A44-98E4-411A31BF1757</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Copy {query} to clipboard;</string>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>F1559F42-7F85-4A26-A604-6E31BD686380</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>will Farrell (@willfarrell)</string>
	<key>description</key>
	<string>Package Repo Search</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Package Managers (v1.24)</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>pkgman cachedb</string>
				<key>subtext</key>
				<string>Rebuild Package Manager Cached Databases</string>
				<key>text</key>
				<string>Force Repo DB Update</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>2BECD5EE-3FDE-434C-8ADA-2FEAE34FBF34</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>63</integer>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();

foreach($cache-&gt;dbs as $key =&gt; $url) {
	//$cache-&gt;get_db($key);
	$cache-&gt;update_db($key);
}</string>
				<key>type</key>
				<integer>1</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>output</key>
				<integer>0</integer>
				<key>removeextension</key>
				<false/>
				<key>sticky</key>
				<false/>
				<key>text</key>
				<string>Package Manager Databases Cached</string>
				<key>title</key>
				<string>Cache Complete</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>348251C4-2B72-432F-A923-B082C6740DEA</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>63</integer>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();

$cache-&gt;clear();</string>
				<key>type</key>
				<integer>1</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>18B0C07D-A101-4267-B306-7925DE8A30C9</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>pkgman cleardb</string>
				<key>subtext</key>
				<string>Remove all database caches</string>
				<key>text</key>
				<string>Clear Cache</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>4F9B49BB-0F1E-4D72-A339-08C76E2D2C2A</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>output</key>
				<integer>0</integer>
				<key>removeextension</key>
				<false/>
				<key>sticky</key>
				<false/>
				<key>text</key>
				<string>Package Manager Databases Cleared</string>
				<key>title</key>
				<string>Cache Deleted</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>0A704625-29E6-450E-8F2C-8E4EC7179899</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>hotkey</key>
				<integer>0</integer>
				<key>hotmod</key>
				<integer>0</integer>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>96A609DD-13FB-44C7-9ADB-F3BC94017A65</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>bower</string>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_json('bower', $query, 'https://bower.herokuapp.com/packages/search/'.$query);

foreach($pkgs as $pkg) {
	$url = str_replace("git://", "https://", $pkg-&gt;url);
	$w-&gt;result( $pkg-&gt;url, $url, $pkg-&gt;name, $url, 'icon-cache/bower.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'bower', 'http://sindresorhus.com/bower-components/#!/search/'.$query, 'No components were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/bower.png' );
	}
	$w-&gt;result( 'bower-www', 'http://bower.io/', 'Go to the website', 'http://bower.io', 'icon-cache/bower.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search bower for "{query}"</string>
				<key>title</key>
				<string>Search bower</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>E894CAC8-3680-4863-B8A5-EFCFD78B56F3</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<true/>
				<key>clipboardtext</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>B8583C34-636E-4A44-98E4-411A31BF1757</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>grunt</string>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = (array) $cache-&gt;get_db('grunt')-&gt;aaData;

function search($plugin, $query) {
	if (strpos($plugin-&gt;name, $query) !== false) {
		return true;
	} else if (strpos($plugin-&gt;ds, $query) !== false) {
		return true;
	} 

	return false;
}

foreach($pkgs as $plugin) {
	if ($query &amp;&amp; search($plugin,  $query)) {
		$title = str_replace('grunt-', '', $plugin-&gt;name); // remove grunt- from title
	
		// add author to title
		if (isset($plugin-&gt;author)) {
			$title .= " by " . $plugin-&gt;author;
		}
		$url = 'https://www.npmjs.org/package/' . $plugin-&gt;name;
		
		//if (strpos($plugin-&gt;description, "DEPRECATED") !== false) { continue; } // skip DEPRECATED repos
		$w-&gt;result( $plugin-&gt;name, $url, $title, $plugin-&gt;ds, 'icon-cache/grunt.png' );
	}
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'grunt', 'http://gruntjs.com/plugins/'.$query, 'No plugins were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/grunt.png' );
	}
	$w-&gt;result( 'grunt-www', 'http://gruntjs.com/', 'Go to the website', 'http://gruntjs.com', 'icon-cache/grunt.png' );
}

echo $w-&gt;toxml();
</string>
				<key>subtext</key>
				<string>Search Grunt for "{query}"</string>
				<key>title</key>
				<string>Search Grunt</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>C0190356-1EDC-4E5C-8187-9E3C4C69FBD1</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>1</integer>
				<key>argument</key>
				<integer>1</integer>
				<key>hotkey</key>
				<integer>0</integer>
				<key>hotmod</key>
				<integer>0</integer>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>72C0A2C4-3F23-46F5-831F-F0A7C4FD04C2</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>npm</string>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('npm', $query, 'https://www.npmjs.org/search?q='.$query, '/&lt;li class="search-result package"&gt;([\s\S]*?)&lt;\/div&gt;/i');

foreach($pkgs as $item) {
	preg_match('/&lt;h2&gt;(.*?)&lt;\/h2&gt;/i', $item, $matches);
	$title = strip_tags($matches[1]);
	
	//preg_match_all('/&lt;p[^&gt;]*&gt;([\s\S]*?)&lt;\/p&gt;/i', $item, $matches);
	preg_match_all('/&lt;p class="description"&gt;([\s\S]*?)&lt;\/p&gt;([\s\S]*?)by([\s\S]*?)&lt;\/span&gt;/i', $item, $matches);
 
 	$author = trim(strip_tags($matches[3][0]));
 	$version = trim(strip_tags($matches[2][0]));
 	$description = html_entity_decode(trim(strip_tags($matches[1][0])));
 
 	$w-&gt;result( $title, 'https://www.npmjs.org/package/'.$title, $title.' ~ v'.$version.' by '.$author, $description, 'icon-cache/npm.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'npm', 'https://www.npmjs.org/search?q='.$query, 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/npm.png' );
	}
	$w-&gt;result( 'npm-www', 'https://www.npmjs.org/', 'Go to the website', 'https://www.npmjs.org', 'icon-cache/npm.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search npm for "{query}"</string>
				<key>title</key>
				<string>Search npm</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>E106723F-9932-431B-8250-64F2983338FC</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>gems</string>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('gems', $query, 'http://rubygems.org/search?utf8=%E2%9C%93&amp;query='.$query, '/&lt;li&gt;([\s\S]*?)&lt;\/li&gt;/i');

foreach($pkgs as $item) {
	// name
	preg_match_all('/&lt;strong&gt;(.*?)&lt;\/strong&gt;/i', $item, $matches);
	if (isset($matches[1][1])) {
		$title = strip_tags($matches[1][1]);
	} else { continue; }
	
	// url
	preg_match('/&lt;a href="(.*?)"&gt;([\s\S]*?)&lt;\/a&gt;/i', $item, $matches);
	$url = $matches[1];
	
	$details = trim(strip_tags(substr($matches[2], strpos($matches[2], "&lt;/strong&gt;")+9)));
	
	if ($title &amp;&amp; $details) { // filter out nav links
		$w-&gt;result( $title, 'http://rubygems.org'.$url, $title, $details, 'icon-cache/gems.png' );
	}
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'gems', 'http://rubygems.org/search?utf8=%E2%9C%93&amp;query='.$query, 'No gems were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/gems.png' );
	}
	$w-&gt;result( 'gems-www', 'http://rubygems.org/', 'Go to the website', 'http://rubygems.org', 'icon-cache/gems.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Ruby Gems for "{query}"</string>
				<key>title</key>
				<string>Search Ruby Gems</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>B9D9D59E-5B75-418E-8D5D-75EADD6D162A</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>plusspaces</key>
				<false/>
				<key>url</key>
				<string>{query}</string>
				<key>utf8</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>cocoa</string>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>$apple_docs = false;

error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_db('cocoa');
if ($apple_docs) {
	$apple = $cache-&gt;get_db('apple');
	$pkgs = array_merge((array)$pkgs, (array)$apple);
}

function search($plugin, $query) {
	if (strpos($plugin-&gt;name, $query) !== false) {
		return true;
	} else if (isset($plugin-&gt;summary) &amp;&amp; strpos($plugin-&gt;summary, $query) !== false) {
		return true;
	}
	return false;
}

$count = 25;
foreach($pkgs as $library ) {
	if (search($library,  $query)) {
		$title = $library-&gt;name;
		if (isset($library-&gt;main_version)) { $title .= ' ('.$library-&gt;main_version.')'; }
		if (isset($library-&gt;user)) { $title .= ' ~ '.$library-&gt;user; }
		
		$url = (isset($library-&gt;url)) ? $library-&gt;url : $library-&gt;doc_url;
		$details = (isset($library-&gt;summary)) ? $library-&gt;summary : $library-&gt;framework;
		
		$icon = (isset($library-&gt;url)) ? 'xcode.png' : 'cocoa.png';
		$w-&gt;result( $library-&gt;name, $url, $title, $details, 'icon-cache/'.$icon );
		if (!--$count) { break; }
	}
}
/*
// query
if ($query) {
	$data = $w-&gt;request('http://cocoapods.org/search?query='.$query.'&amp;ids=20&amp;offset=0');
	$json = json_decode($data);
	//print_r($json);
	foreach($json-&gt;allocations as $group) {
		$name = $group[4];
		$html = $group[5];
		for($i = 0; $i &lt; count($name); $i++) {
			print_r($name[$i]);
			print_r($html[$i]);
			// name
			//preg_match('/&lt;a(.*?)&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
			//$title = strip_tags($matches[0]);
			
			// url
			//preg_match('/Homepage: &lt;a(.*?)&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
			//$details = strip_tags(substr($item, strpos($item, ":")+2));
			
			//$w-&gt;result( $title, 'http://pear.php.net/package/'.$title, $title, $details, 'cocoa.png' );
			
			$url = ''; // parsed grom $html[5]
			$w-&gt;result( $title, $url, $name[$i], '', 'cocoa.png' );
		}
	}
}*/

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'cocoa', 'http://cocoadocs.org/?q='.$query, 'No libraries were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/cocoa.png' );
	}
	$w-&gt;result( 'cocoa-www', 'http://cocoadocs.org/', 'Go to the website', 'http://http://cocoadocs.org', 'icon-cache/cocoa.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search CocoaPods for "{query}"</string>
				<key>title</key>
				<string>Search CocoaPods</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>265DF548-7D96-4F94-AB0E-6AD26F31B4A1</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>brew</string>
				<key>runningsubtext</key>
				<string>Searcing for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );


$pkgs = $cache-&gt;get_query_regex('brew', $query, 'http://braumeister.org/search/'.$query, '/&lt;div class="formula (odd|even)"&gt;([\s\S]*?)&lt;\/div&gt;/i', 2);

foreach($pkgs as $item) {
	// name
	preg_match('/&lt;a href="(.*?)" class="formula"&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
	$title = strip_tags($matches[0]);
	
	// version
	preg_match('/&lt;strong class="version"&gt;(.*?)&lt;\/strong&gt;/i', $item, $matches);
	$version = strip_tags($matches[0]);
	
	// url
	preg_match('/Homepage: &lt;a href="(.*?)"&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
	$details = strip_tags($matches[1]);
	
	$w-&gt;result( $title, 'http://braumeister.org/formula/'.$title, $title.' ~ '.$version, $details, 'icon-cache/brew.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'brew', 'http://braumeister.org/search/'.$query, 'No plugins were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/brew.png' );
	}
	$w-&gt;result( 'brew-www', 'http://braumeister.org/', 'Go to the website', 'http://braumeister.org', 'icon-cache/brew.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search homebrew for "{query}"</string>
				<key>title</key>
				<string>Search homebrew</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>78A70680-7C8A-4CC4-AE71-A070E3E8CCD9</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>apt-get</string>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('apt-get', $query, 'https://apps.ubuntu.com/cat/search/?q='.$query, '/&lt;tr&gt;([\s\S]*?)&lt;\/tr&gt;/i');


foreach($pkgs as $item) {
	preg_match('/&lt;p&gt;(.*?)&lt;\/p&gt;/i', $item, $matches);
	$name = trim(strip_tags($matches[1]));
	
	preg_match('/&lt;h3&gt;([\s\S]*?)&lt;\/h3&gt;/i', $item, $matches);
	$description = trim(strip_tags($matches[1]));

	$w-&gt;result( $name, 'https://apps.ubuntu.com/cat/applications/'.$name, $name, $description, 'icon-cache/apt-get.png' );
	//break;
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'apt-get', 'https://apps.ubuntu.com/cat/search/?q='.$query, 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/apt-get.png' );
	}
	$w-&gt;result( 'apt-get-www', 'https://apps.ubuntu.com/cat/', 'Go to the website', 'https://apps.ubuntu.com', 'icon-cache/apt-get.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search apt-get for "{query}"</string>
				<key>title</key>
				<string>Search apt-get</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>D882F2C5-CA0E-4D23-B1CC-28AC8AD1DB0E</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>puppet</string>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('cache.php');
require_once('workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('puppet', $query, 'https://forge.puppetlabs.com/modules?utf-8=✓&amp;sort=rank&amp;q='.$query, '/&lt;li class="clearfix "&gt;([\s\S]*?)&lt;\/li&gt;/i');

foreach($pkgs as $item) {
	preg_match('/&lt;h3&gt;([\s\S]*?)&lt;\/h3&gt;/i', $item, $matches);
	$name = trim(strip_tags($matches[1]));
	
	preg_match('/&lt;p&gt;([\s\S]*?)&lt;\/p&gt;/i', $item, $matches);
	$description = trim(strip_tags($matches[1]));
	
	preg_match('/Version([\s\S]*?)&lt;\/a&gt;/i', $item, $matches);
	$version = trim(strip_tags($matches[1]));

	$w-&gt;result( $name, 'https://forge.puppetlabs.com/'.$name, $name.' ~ v'.$version, $description, 'icon-cache/puppet.png' );
	//break;
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'puppet', 'https://apps.ubuntu.com/cat/search/?q='.$query, 'No modules were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/puppet.png' );
	}
	$w-&gt;result( 'puppet-www', 'https://forge.puppetlabs.com/', 'Go to the website', 'https://forge.puppetlabs.com', 'icon-cache/puppet.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search puppet for "{query}"</string>
				<key>title</key>
				<string>Search puppet</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>F1559F42-7F85-4A26-A604-6E31BD686380</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>0A704625-29E6-450E-8F2C-8E4EC7179899</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>18B0C07D-A101-4267-B306-7925DE8A30C9</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>265DF548-7D96-4F94-AB0E-6AD26F31B4A1</key>
		<dict>
			<key>ypos</key>
			<real>790</real>
		</dict>
		<key>2BECD5EE-3FDE-434C-8ADA-2FEAE34FBF34</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>348251C4-2B72-432F-A923-B082C6740DEA</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>4F9B49BB-0F1E-4D72-A339-08C76E2D2C2A</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>72C0A2C4-3F23-46F5-831F-F0A7C4FD04C2</key>
		<dict>
			<key>ypos</key>
			<real>460</real>
		</dict>
		<key>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</key>
		<dict>
			<key>ypos</key>
			<real>750</real>
		</dict>
		<key>78A70680-7C8A-4CC4-AE71-A070E3E8CCD9</key>
		<dict>
			<key>ypos</key>
			<real>900</real>
		</dict>
		<key>96A609DD-13FB-44C7-9ADB-F3BC94017A65</key>
		<dict>
			<key>ypos</key>
			<real>340</real>
		</dict>
		<key>B8583C34-636E-4A44-98E4-411A31BF1757</key>
		<dict>
			<key>ypos</key>
			<real>340</real>
		</dict>
		<key>B9D9D59E-5B75-418E-8D5D-75EADD6D162A</key>
		<dict>
			<key>ypos</key>
			<real>680</real>
		</dict>
		<key>C0190356-1EDC-4E5C-8187-9E3C4C69FBD1</key>
		<dict>
			<key>ypos</key>
			<real>450</real>
		</dict>
		<key>D882F2C5-CA0E-4D23-B1CC-28AC8AD1DB0E</key>
		<dict>
			<key>ypos</key>
			<real>1010</real>
		</dict>
		<key>E106723F-9932-431B-8250-64F2983338FC</key>
		<dict>
			<key>ypos</key>
			<real>560</real>
		</dict>
		<key>E894CAC8-3680-4863-B8A5-EFCFD78B56F3</key>
		<dict>
			<key>ypos</key>
			<real>340</real>
		</dict>
		<key>F1559F42-7F85-4A26-A604-6E31BD686380</key>
		<dict>
			<key>ypos</key>
			<real>1130</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>github.com/willfarrell</string>
</dict>
</plist>
